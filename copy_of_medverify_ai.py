# -*- coding: utf-8 -*-
"""Copy of MedVerify AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nFubWKYG2c8_TGVIg3XqgszWbrFZfh9o
"""

!pip install gradio transformers torch datasets pandas numpy requests python-multipart
!pip install google-generativeai huggingface_hub accelerate bitsandbytes
!pip install textblob wordcloud matplotlib seaborn scikit-learn plotly
!pip install fastapi uvicorn pyngrok
!pip install -U sentence-transformers

import gradio as gr
import pandas as pd
import numpy as np
import json
import re
import requests
import warnings
from datetime import datetime
from typing import List, Dict, Optional, Tuple, Any
import logging
from dataclasses import dataclass
import os
import asyncio
from pathlib import Path

# Google Generative AI
import google.generativeai as genai

# Hugging Face
from transformers import (
    pipeline,
    AutoTokenizer,
    AutoModel,
    AutoModelForCausalLM,
    BitsAndBytesConfig
)
import torch
from huggingface_hub import login

# Text processing
from textblob import TextBlob
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer

# FastAPI (for backend if needed)
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware

warnings.filterwarnings('ignore')
logging.basicConfig(level=logging.INFO)

print("✅ All libraries imported successfully!")

GEMINI_API_KEY = "AIzaSyDcCs6ni1LHRE84W0bVxrRYLNuRHs3TpxQ"  # Replace with your actual API key
HF_TOKEN = "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"     # Replace with your actual HF token

# Configure Gemini
try:
    genai.configure(api_key=GEMINI_API_KEY)
    print("✅ Gemini API configured successfully!")
except Exception as e:
    print(f"❌ Gemini API configuration failed: {e}")

# Login to Hugging Face (optional, for gated models)
try:
    if HF_TOKEN != "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":
        login(token=HF_TOKEN)
        print("✅ Hugging Face authentication successful!")
except Exception as e:
    print(f"⚠️ Hugging Face authentication failed: {e}")

@dataclass
class DrugInfo:
    name: str
    dosage: str
    frequency: str
    route: str = "oral"
    duration: str = ""

@dataclass
class PatientProfile:
    age: int
    weight: Optional[float] = None
    medical_conditions: List[str] = None
    allergies: List[str] = None
    current_medications: List[str] = None

@dataclass
class InteractionResult:
    severity: str
    description: str
    recommendation: str
    confidence_score: float

@dataclass
class ChatMessage:
    role: str
    content: str
    timestamp: datetime
    model_used: str = "unknown"

print("✅ Data models defined successfully!")

class DrugDatabase:
    def __init__(self):
        # Comprehensive drug database with interactions
        self.drugs_data = {
            "aspirin": {
                "generic_name": "acetylsalicylic acid",
                "category": "NSAID",
                "dosage_ranges": {"adult": "81-650mg", "pediatric": "10-15mg/kg", "elderly": "81-325mg"},
                "contraindications": ["bleeding_disorders", "peptic_ulcer", "severe_liver_disease", "pregnancy_third_trimester"],
                "interactions": ["warfarin", "methotrexate", "alcohol", "ibuprofen"],
                "alternatives": ["ibuprofen", "naproxen", "celecoxib", "acetaminophen"],
                "side_effects": ["stomach_upset", "bleeding", "tinnitus", "allergic_reactions"]
            },
            "warfarin": {
                "generic_name": "warfarin sodium",
                "category": "anticoagulant",
                "dosage_ranges": {"adult": "2-10mg", "elderly": "1-5mg"},
                "contraindications": ["pregnancy", "bleeding_disorders", "severe_hypertension", "recent_surgery"],
                "interactions": ["aspirin", "amiodarone", "antibiotics", "nsaids"],
                "alternatives": ["apixaban", "rivaroxaban", "dabigatran", "enoxaparin"],
                "side_effects": ["bleeding", "bruising", "hair_loss", "skin_necrosis"]
            },
            "metformin": {
                "generic_name": "metformin hydrochloride",
                "category": "antidiabetic",
                "dosage_ranges": {"adult": "500-2000mg", "elderly": "500-1000mg"},
                "contraindications": ["kidney_disease", "liver_disease", "heart_failure", "metabolic_acidosis"],
                "interactions": ["alcohol", "contrast_dye", "diuretics", "corticosteroids"],
                "alternatives": ["glipizide", "sitagliptin", "insulin", "glyburide"],
                "side_effects": ["nausea", "diarrhea", "metallic_taste", "vitamin_b12_deficiency"]
            },
            "lisinopril": {
                "generic_name": "lisinopril",
                "category": "ACE_inhibitor",
                "dosage_ranges": {"adult": "10-40mg", "elderly": "5-20mg"},
                "contraindications": ["pregnancy", "angioedema", "bilateral_renal_artery_stenosis", "hyperkalemia"],
                "interactions": ["potassium_supplements", "nsaids", "lithium", "diuretics"],
                "alternatives": ["losartan", "amlodipine", "hydrochlorothiazide", "enalapril"],
                "side_effects": ["dry_cough", "hyperkalemia", "hypotension", "angioedema"]
            },
            "ibuprofen": {
                "generic_name": "ibuprofen",
                "category": "NSAID",
                "dosage_ranges": {"adult": "200-800mg", "pediatric": "5-10mg/kg", "elderly": "200-400mg"},
                "contraindications": ["peptic_ulcer", "kidney_disease", "heart_failure", "aspirin_allergy"],
                "interactions": ["warfarin", "lisinopril", "lithium", "aspirin"],
                "alternatives": ["naproxen", "celecoxib", "acetaminophen", "diclofenac"],
                "side_effects": ["stomach_upset", "kidney_damage", "hypertension", "heart_problems"]
            },
            "acetaminophen": {
                "generic_name": "acetaminophen",
                "category": "analgesic",
                "dosage_ranges": {"adult": "325-1000mg", "pediatric": "10-15mg/kg", "elderly": "325-650mg"},
                "contraindications": ["severe_liver_disease", "alcohol_dependence"],
                "interactions": ["warfarin", "alcohol", "phenytoin"],
                "alternatives": ["ibuprofen", "aspirin", "naproxen"],
                "side_effects": ["liver_damage", "skin_reactions", "blood_disorders"]
            }
        }

        # Enhanced interaction severity matrix
        self.interaction_severity = {
            ("aspirin", "warfarin"): ("major", "Increased bleeding risk - synergistic anticoagulant effects", 0.9),
            ("warfarin", "aspirin"): ("major", "Increased bleeding risk - synergistic anticoagulant effects", 0.9),
            ("ibuprofen", "lisinopril"): ("moderate", "Reduced ACE inhibitor efficacy and increased BP", 0.7),
            ("lisinopril", "ibuprofen"): ("moderate", "Reduced ACE inhibitor efficacy and increased BP", 0.7),
            ("metformin", "alcohol"): ("moderate", "Increased lactic acidosis risk", 0.6),
            ("aspirin", "ibuprofen"): ("minor", "Increased GI irritation and bleeding risk", 0.4),
            ("warfarin", "acetaminophen"): ("minor", "Potential INR elevation with high doses", 0.3),
            ("metformin", "ibuprofen"): ("minor", "Monitor kidney function", 0.2)
        }

    def get_drug_info(self, drug_name: str) -> Dict:
        """Get comprehensive drug information"""
        drug_name = drug_name.lower().strip()
        return self.drugs_data.get(drug_name, {})

    def check_interactions(self, drugs: List[str]) -> List[InteractionResult]:
        """Check for drug interactions"""
        interactions = []
        drugs = [d.lower().strip() for d in drugs if d.strip()]

        for i, drug1 in enumerate(drugs):
            for drug2 in drugs[i+1:]:
                interaction_key = (drug1, drug2)
                reverse_key = (drug2, drug1)

                if interaction_key in self.interaction_severity:
                    severity, desc, confidence = self.interaction_severity[interaction_key]
                    interactions.append(InteractionResult(
                        severity=severity,
                        description=f"{drug1.title()} + {drug2.title()}: {desc}",
                        recommendation=self._get_interaction_recommendation(severity),
                        confidence_score=confidence
                    ))
                elif reverse_key in self.interaction_severity:
                    severity, desc, confidence = self.interaction_severity[reverse_key]
                    interactions.append(InteractionResult(
                        severity=severity,
                        description=f"{drug1.title()} + {drug2.title()}: {desc}",
                        recommendation=self._get_interaction_recommendation(severity),
                        confidence_score=confidence
                    ))

        return interactions

    def _get_interaction_recommendation(self, severity: str) -> str:
        """Get recommendations based on interaction severity"""
        recommendations = {
            "major": "❌ AVOID COMBINATION: Consult physician immediately for alternative therapy",
            "moderate": "⚠️ MONITOR CLOSELY: Consider dose adjustment and frequent monitoring",
            "minor": "ℹ️ MONITOR: Watch for symptoms, usually manageable with precautions"
        }
        return recommendations.get(severity, "Consult healthcare provider for guidance.")

    def get_alternatives(self, drug_name: str, patient_age: int, contraindications: List[str] = None) -> List[Dict]:
        """Get alternative medications with detailed info"""
        drug_name = drug_name.lower().strip()
        drug_info = self.drugs_data.get(drug_name, {})
        alternatives = drug_info.get("alternatives", [])

        detailed_alternatives = []

        for alt in alternatives:
            alt_info = self.get_drug_info(alt)
            if alt_info:
                # Check age appropriateness
                suitable = True
                if patient_age < 18:
                    pediatric_unsuitable = ["warfarin", "aspirin"]
                    if alt in pediatric_unsuitable:
                        suitable = False

                # Check contraindications
                if contraindications and alt_info.get("contraindications"):
                    if any(contra in contraindications for contra in alt_info.get("contraindications", [])):
                        suitable = False

                detailed_alternatives.append({
                    "name": alt.title(),
                    "category": alt_info.get("category", "Unknown"),
                    "suitable": suitable,
                    "dosage_range": alt_info.get("dosage_ranges", {}).get("adult", "Consult physician")
                })

        return detailed_alternatives

# Initialize database
drug_db = DrugDatabase()
print("✅ Enhanced Drug Database initialized!")

class MultiModelNLPProcessor:
    def __init__(self):
        self.models = {}
        self.sentence_transformer = None
        self.load_models()

    def load_models(self):
        """Load multiple NLP models"""
        try:
            # Load IBM Granite model from Hugging Face
            print("🔄 Loading IBM Granite model...")
            self.models['granite'] = pipeline(
                "text-generation",
                model="ibm-granite/granite-3b-code-base",
                torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
                device_map="auto" if torch.cuda.is_available() else None
            )
            print("✅ IBM Granite model loaded!")
        except Exception as e:
            print(f"⚠️ Failed to load Granite model: {e}")

        try:
            # Load biomedical NER model
            print("🔄 Loading biomedical NER model...")
            self.models['ner'] = pipeline(
                "ner",
                model="d4data/biomedical-ner-all",
                aggregation_strategy="simple"
            )
            print("✅ Biomedical NER model loaded!")
        except Exception as e:
            print(f"⚠️ Failed to load NER model: {e}")

        try:
            # Load sentiment analysis model
            print("🔄 Loading sentiment analysis model...")
            self.models['sentiment'] = pipeline("sentiment-analysis")
            print("✅ Sentiment analysis model loaded!")
        except Exception as e:
            print(f"⚠️ Failed to load sentiment model: {e}")

        try:
            # Load sentence transformer for embeddings
            print("🔄 Loading sentence transformer...")
            self.sentence_transformer = SentenceTransformer('all-MiniLM-L6-v2')
            print("✅ Sentence transformer loaded!")
        except Exception as e:
            print(f"⚠️ Failed to load sentence transformer: {e}")

    def extract_drug_info_advanced(self, text: str) -> List[DrugInfo]:
        """Advanced drug information extraction using multiple models"""
        drugs = []

        # Enhanced regex patterns
        drug_patterns = [
            r'(\w+)\s+(\d+(?:\.\d+)?)\s*(?:mg|g|ml|tablets?|pills?|capsules?)\s*(?:(\w+(?:\s+\w+)*))?',
            r'take\s+(\w+)\s+(\d+(?:\.\d+)?)\s*(?:mg|g|ml|tablets?|pills?|capsules?)',
            r'(\w+)\s+(\d+(?:\.\d+)?)\s*(?:mg|g|ml)\s+(\w+(?:\s+\w+)*)',
            r'rx:?\s*(\w+)\s+(\d+(?:\.\d+)?)\s*(?:mg|g|ml)',
        ]

        # Frequency patterns with medical abbreviations
        frequency_patterns = {
            'once daily': r'(?:once\s+(?:a\s+)?daily|daily|od|qd|q24h)',
            'twice daily': r'(?:twice\s+(?:a\s+)?daily|bid|b\.?i\.?d\.?|q12h)',
            'three times daily': r'(?:three\s+times\s+daily|tid|t\.?i\.?d\.?|q8h)',
            'four times daily': r'(?:four\s+times\s+daily|qid|q\.?i\.?d\.?|q6h)',
            'every 4 hours': r'(?:every\s+4\s+hours|q4h)',
            'every 6 hours': r'(?:every\s+6\s+hours|q6h)',
            'every 8 hours': r'(?:every\s+8\s+hours|q8h)',
            'every 12 hours': r'(?:every\s+12\s+hours|q12h)',
            'as needed': r'(?:as\s+needed|prn|p\.?r\.?n\.?)',
            'before meals': r'(?:before\s+meals|ac|a\.?c\.?)',
            'after meals': r'(?:after\s+meals|pc|p\.?c\.?)',
            'at bedtime': r'(?:at\s+bedtime|hs|h\.?s\.?|qhs)'
        }

        text_lower = text.lower()

        # Extract using regex
        for pattern in drug_patterns:
            matches = re.finditer(pattern, text_lower)
            for match in matches:
                drug_name = match.group(1).capitalize()
                dosage = match.group(2)

                # Determine frequency
                frequency = "as directed"
                for freq_name, freq_pattern in frequency_patterns.items():
                    if re.search(freq_pattern, text_lower):
                        frequency = freq_name
                        break

                # Determine route
                route = "oral"
                route_patterns = {
                    "intravenous": r'(?:iv|intravenous|injection)',
                    "intramuscular": r'(?:im|intramuscular)',
                    "subcutaneous": r'(?:sc|subq|subcutaneous)',
                    "topical": r'(?:topical|cream|ointment|gel)',
                    "sublingual": r'(?:sublingual|sl|under\s+tongue)',
                    "rectal": r'(?:rectal|pr|suppository)'
                }

                for route_name, route_pattern in route_patterns.items():
                    if re.search(route_pattern, text_lower):
                        route = route_name
                        break

                # Extract duration
                duration = ""
                duration_match = re.search(r'for\s+(\d+)\s+(days?|weeks?|months?)', text_lower)
                if duration_match:
                    duration = f"{duration_match.group(1)} {duration_match.group(2)}"

                drugs.append(DrugInfo(
                    name=drug_name,
                    dosage=f"{dosage}mg",
                    frequency=frequency,
                    route=route,
                    duration=duration
                ))

        # Use NER model if available
        if 'ner' in self.models:
            try:
                entities = self.models['ner'](text)
                for entity in entities:
                    if entity['entity_group'] in ['DRUG', 'MEDICINE', 'MEDICATION', 'CHEMICAL']:
                        # Additional processing for NLP-extracted entities
                        drug_name = entity['word'].capitalize()
                        if not any(drug.name.lower() == drug_name.lower() for drug in drugs):
                            drugs.append(DrugInfo(
                                name=drug_name,
                                dosage="as prescribed",
                                frequency="as directed",
                                route="oral"
                            ))
            except Exception as e:
                print(f"⚠️ NER extraction failed: {e}")

        return drugs

    def analyze_medical_text_advanced(self, text: str) -> Dict:
        """Advanced medical text analysis using multiple models"""
        analysis = {
            "sentiment": "neutral",
            "confidence": 0.0,
            "key_terms": [],
            "urgency_level": "routine",
            "medical_entities": [],
            "drug_entities": [],
            "condition_entities": [],
            "embedding": None
        }

        try:
            # Sentiment analysis
            if 'sentiment' in self.models:
                sentiment_result = self.models['sentiment'](text)[0]
                analysis["sentiment"] = sentiment_result["label"].lower()
                analysis["confidence"] = sentiment_result["score"]

            # Extract medical entities using NER
            if 'ner' in self.models:
                entities = self.models['ner'](text)
                for entity in entities:
                    if entity['entity_group'] == 'DRUG':
                        analysis["drug_entities"].append(entity['word'])
                    elif entity['entity_group'] in ['DISEASE', 'CONDITION']:
                        analysis["condition_entities"].append(entity['word'])
                    analysis["medical_entities"].append({
                        "text": entity['word'],
                        "label": entity['entity_group'],
                        "confidence": entity['score']
                    })

            # Extract key medical terms
            blob = TextBlob(text)
            medical_keywords = [
                'pain', 'fever', 'nausea', 'headache', 'dizziness', 'fatigue',
                'infection', 'allergy', 'reaction', 'symptoms', 'side effects',
                'emergency', 'urgent', 'severe', 'acute', 'chronic', 'prescription',
                'medication', 'dose', 'dosage', 'treatment', 'therapy'
            ]

            analysis["key_terms"] = [word.lower() for word in blob.words
                                   if word.lower() in medical_keywords]

            # Urgency assessment with more sophisticated keywords
            urgent_keywords = ['emergency', 'urgent', 'severe', 'acute', 'critical', 'immediate', 'stat']
            moderate_keywords = ['moderate', 'concerning', 'worrying', 'significant']

            if any(keyword in text.lower() for keyword in urgent_keywords):
                analysis["urgency_level"] = "urgent"
            elif any(keyword in text.lower() for keyword in moderate_keywords):
                analysis["urgency_level"] = "moderate"

            # Generate text embedding
            if self.sentence_transformer:
                analysis["embedding"] = self.sentence_transformer.encode(text)

        except Exception as e:
            print(f"❌ Text analysis error: {e}")

        return analysis

    def generate_medical_response(self, prompt: str, model_name: str = "granite") -> str:
        """Generate medical response using specified model"""
        try:
            if model_name == "granite" and 'granite' in self.models:
                # Use Granite model for code-like structured responses
                medical_prompt = f"""
                Medical Query: {prompt}

                Provide a structured medical response including:
                1. Analysis of the query
                2. Relevant drug information
                3. Safety considerations
                4. Recommendations

                Response:
                """

                result = self.models['granite'](
                    medical_prompt,
                    max_new_tokens=200,
                    temperature=0.1,
                    do_sample=True,
                    pad_token_id=self.models['granite'].tokenizer.eos_token_id
                )

                return result[0]['generated_text'].replace(medical_prompt, "").strip()

        except Exception as e:
            print(f"⚠️ Model generation failed: {e}")

        return "I'm here to help with medical information. Please provide specific questions about medications, dosages, or drug interactions."

# Initialize NLP processor
nlp_processor = MultiModelNLPProcessor()
print("✅ Multi-Model NLP Processor initialized!")

class GeminiProcessor:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.model = None
        self.initialize_model()

    def initialize_model(self):
        """Initialize Gemini model"""
        try:
            self.model = genai.GenerativeModel('gemini-1.5-flash')
            print("✅ Gemini model initialized!")
        except Exception as e:
            print(f"❌ Failed to initialize Gemini: {e}")

    def generate_medical_analysis(self, query: str, patient_info: Dict = None) -> str:
        """Generate comprehensive medical analysis using Gemini"""
        if not self.model:
            return "Gemini model not available. Please check your API key."

        try:
            # Construct detailed prompt
            prompt = f"""
            You are an AI medical assistant specializing in prescription verification and drug analysis.
            Please analyze the following medical query and provide comprehensive information.

            Query: {query}

            Patient Information: {json.dumps(patient_info) if patient_info else "Not provided"}

            Please provide:
            1. 🔍 **Analysis**: Detailed breakdown of the medical query
            2. 💊 **Drug Information**: If medications are mentioned, provide details about each
            3. ⚠️ **Safety Considerations**: Important warnings, contraindications, and precautions
            4. 🏥 **Clinical Recommendations**: Professional medical guidance
            5. 📋 **Next Steps**: Suggested actions for the patient

            Important: Always emphasize that this information is for educational purposes and not a substitute for professional medical advice.
            """

            response = self.model.generate_content(prompt)
            return response.text

        except Exception as e:
            print(f"❌ Gemini generation failed: {e}")
            return f"Error generating response with Gemini: {str(e)}"

    def analyze_drug_interactions_gemini(self, drugs: List[str], patient_info: Dict = None) -> str:
        """Analyze drug interactions using Gemini's advanced reasoning"""
        if not self.model:
            return "Gemini model not available."

        try:
            prompt = f"""
            As a clinical pharmacist AI, analyze potential drug interactions for the following medications:

            Medications: {', '.join(drugs)}
            Patient Information: {json.dumps(patient_info) if patient_info else "Not provided"}

            Please provide:
            1. 🔄 **Interaction Analysis**: Detailed analysis of each drug combination
            2. 🚨 **Severity Levels**: Rate interactions as Minor, Moderate, or Major
            3. ⚕️ **Clinical Significance**: Real-world implications for patient care
            4. 🛡️ **Management Strategies**: How to safely manage identified interactions
            5. 📊 **Risk Assessment**: Overall risk profile for this drug combination
            6. 🔄 **Alternative Options**: Safer medication alternatives if needed

            Focus on evidence-based information and clinical relevance.
            """

            response = self.model.generate_content(prompt)
            return response.text

        except Exception as e:
            return f"Error analyzing interactions with Gemini: {str(e)}"

    def get_dosage_recommendations_gemini(self, drug: str, patient_info: Dict) -> str:
        """Get personalized dosage recommendations using Gemini"""
        if not self.model:
            return "Gemini model not available."

        try:
            prompt = f"""
            As a clinical pharmacist, provide personalized dosage recommendations for:

            Medication: {drug}
            Patient Profile: {json.dumps(patient_info)}

            Please provide:
            1. 💊 **Standard Dosing**: Typical dosage ranges for this medication
            2. 👤 **Patient-Specific Factors**: How patient characteristics affect dosing
            3. 📏 **Recommended Dose**: Specific recommendation for this patient
            4. ⏰ **Dosing Schedule**: Frequency and timing recommendations
            5. 🔬 **Monitoring Parameters**: What to monitor during therapy
            6. ⚠️ **Dose Adjustments**: When and how to modify the dose
            7. 🚫 **Contraindications**: Any reasons this patient shouldn't take this medication

            Consider age, weight, kidney function, liver function, and other medical conditions.
            """

            response = self.model.generate_content(prompt)
            return response.text

        except Exception as e:
            return f"Error getting dosage recommendations: {str(e)}"

# Initialize Gemini processor
gemini_processor = GeminiProcessor(GEMINI_API_KEY) if GEMINI_API_KEY != "YOUR_GEMINI_API_KEY_HERE" else None
print("✅ Gemini Processor initialized!" if gemini_processor else "⚠️ Gemini API key required")

class ComprehensiveMedicalChatbot:
    def __init__(self):
        self.drug_db = drug_db
        self.nlp_processor = nlp_processor
        self.gemini_processor = gemini_processor
        self.conversation_history = []
        self.current_patient = None

    def set_patient_profile(self, age: int, weight: float = None, conditions: List[str] = None,
                           allergies: List[str] = None, medications: List[str] = None):
        """Set current patient profile"""
        self.current_patient = PatientProfile(
            age=age,
            weight=weight,
            medical_conditions=conditions or [],
            allergies=allergies or [],
            current_medications=medications or []
        )

    def analyze_query_comprehensive(self, query: str, use_gemini: bool = True) -> str:
        """Comprehensive query analysis using multiple AI models"""
        try:
            # Basic text analysis
            text_analysis = self.nlp_processor.analyze_medical_text_advanced(query)

            # Extract drug information
            extracted_drugs = self.nlp_processor.extract_drug_info_advanced(query)
            drug_names = [drug.name.lower() for drug in extracted_drugs]

            # Prepare patient info for Gemini
            patient_info = {}
            if self.current_patient:
                patient_info = {
                    "age": self.current_patient.age,
                    "weight": self.current_patient.weight,
                    "medical_conditions": self.current_patient.medical_conditions,
                    "allergies": self.current_patient.allergies,
                    "current_medications": self.current_patient.current_medications
                }

            # Determine query type and route to appropriate handler
            query_lower = query.lower()

            # Use Gemini for comprehensive analysis if available
            if use_gemini and self.gemini_processor:
                if any(word in query_lower for word in ['interaction', 'interact', 'combine', 'together']):
                    if drug_names:
                        return self.gemini_processor.analyze_drug_interactions_gemini(drug_names, patient_info)
                    else:
                        return "Please specify which medications you'd like to check for interactions."

                elif any(word in query_lower for word in ['dosage', 'dose', 'how much', 'amount']):
                    if drug_names:
                        return self.gemini_processor.get_dosage_recommendations_gemini(drug_names[0], patient_info)
                    else:
                        return "Please specify which medication you need dosage information for."

                else:
                    return self.gemini_processor.generate_medical_analysis(query, patient_info)

            # Fallback to local processing if Gemini not available
            else:
                return self._process_query_locally(query, drug_names, text_analysis)

        except Exception as e:
            return f"❌ Error processing query: {str(e)}"

    def _process_query_locally(self, query: str, drug_names: List[str], text_analysis: Dict) -> str:
        """Process query using local models and database"""
        query_lower = query.lower()

        if any(word in query_lower for word in ['interaction', 'interact', 'combine', 'together']):
            return self._handle_interaction_query_local(drug_names)

        elif any(word in query_lower for word in ['dosage', 'dose', 'how much', 'amount']):
            return self._handle_dosage_query_local(drug_names)

        elif any(word in query_lower for word in ['alternative', 'substitute', 'replace']):
            return self._handle_alternatives_query_local(drug_names)

        else:
            return self._handle_general_query_local(query, drug_names, text_analysis)

    def _handle_interaction_query_local(self, drugs: List[str]) -> str:
        """Handle interaction queries locally"""
        if len(drugs) < 2:
            return "Please provide at least two medications to check for interactions."

        interactions = self.drug_db.check_interactions(drugs)

        if not interactions:
            return f"✅ **No significant interactions found** between: {', '.join([d.title() for d in drugs])}"

        response = f"🔍 **Drug Interaction Analysis**\n\n"
        response += f"**Medications:** {', '.join([d.title() for d in drugs])}\n\n"

        for interaction in interactions:
            severity_emoji = {"major": "🚨", "moderate": "⚠️", "minor": "ℹ️"}
            response += f"{severity_emoji.get(interaction.severity, '❓')} **{interaction.severity.upper()} INTERACTION** "
            response += f"(Confidence: {interaction.confidence_score:.0%})\n\n"
            response += f"**Description:** {interaction.description}\n\n"
            response += f"**Recommendation:** {interaction.recommendation}\n\n"
            response += "---\n\n"

        return response

    def _handle_dosage_query_local(self, drugs: List[str]) -> str:
        """Handle dosage queries locally"""
        if not drugs:
            return "Please specify which medication you need dosage information for."

        response = "💊 **Dosage Information**\n\n"

        for drug in drugs:
            drug_info = self.drug_db.get_drug_info(drug)
            if drug_info:
                response += f"**{drug.title()}** ({drug_info.get('generic_name', 'N/A')})\n\n"

                dosage_ranges = drug_info.get('dosage_ranges', {})
                if self.current_patient:
                    if self.current_patient.age < 18:
                        recommended = dosage_ranges.get('pediatric', 'Consult pediatrician')
                    elif self.current_patient.age > 65:
                        recommended = dosage_ranges.get('elderly', dosage_ranges.get('adult', 'Consult physician'))
                    else:
                        recommended = dosage_ranges.get('adult', 'Consult physician')

                    response += f"• **Recommended for patient:** {recommended}\n"

                response += f"• **Adult dosage range:** {dosage_ranges.get('adult', 'N/A')}\n"
                response += f"• **Category:** {drug_info.get('category', 'Unknown')}\n"

                if drug_info.get('contraindications'):
                    response += f"• **⚠️ Contraindications:** {', '.join(drug_info['contraindications'])}\n"

                response += "\n"
            else:
                response += f"❌ Information not available for {drug.title()}\n\n"

        response += "**⚠️ Important:** Always consult your healthcare provider for personalized dosing recommendations."
        return response

    def _handle_alternatives_query_local(self, drugs: List[str]) -> str:
        """Handle alternative medication queries locally"""
        if not drugs:
            return "Please specify which medication you need alternatives for."

        response = "🔄 **Alternative Medications**\n\n"

        for drug in drugs:
            patient_age = self.current_patient.age if self.current_patient else 35
            contraindications = self.current_patient.medical_conditions if self.current_patient else []

            alternatives = self.drug_db.get_alternatives(drug, patient_age, contraindications)

            if alternatives:
                response += f"**Alternatives for {drug.title()}:**\n\n"
                for alt in alternatives:
                    status = "✅ Suitable" if alt['suitable'] else "⚠️ Check with doctor"
                    response += f"• **{alt['name']}** ({alt['category']}) - {status}\n"
                    response += f"  Dosage range: {alt['dosage_range']}\n\n"
            else:
                response += f"❌ No alternatives found for {drug.title()}\n\n"

        response += "💡 **Note:** Always discuss medication changes with your healthcare provider."
        return response

    def _handle_general_query_local(self, query: str, drugs: List[str], analysis: Dict) -> str:
        """Handle general queries locally"""
        response = "🤖 **AI Medical Assistant Response**\n\n"

        if analysis['urgency_level'] == 'urgent':
            response += "🚨 **URGENT NOTICE:** Your query suggests a potentially serious medical situation. Please seek immediate medical attention.\n\n"

        if drugs:
            response += f"**Medications identified:** {', '.join([d.title() for d in drugs])}\n\n"

            for drug in drugs:
                drug_info = self.drug_db.get_drug_info(drug)
                if drug_info:
                    response += f"**{drug.title()}:**\n"
                    response += f"• Category: {drug_info.get('category', 'Unknown')}\n"
                    response += f"• Common side effects: {', '.join(drug_info.get('side_effects', ['Not listed'])[:3])}\n\n"

        if analysis['key_terms']:
            response += f"**Key medical terms:** {', '.join(analysis['key_terms'])}\n\n"

        response += "**How I can help you:**\n"
        response += "• Check drug interactions\n"
        response += "• Provide dosage recommendations\n"
        response += "• Suggest alternative medications\n"
        response += "• Analyze prescription text\n"
        response += "• Answer medical questions\n\n"
        response += "Please provide specific medication names or ask detailed questions for better assistance."

        return response

# Initialize the comprehensive chatbot
chatbot = ComprehensiveMedicalChatbot()
print("✅ Comprehensive Medical Chatbot initialized!")

import gradio as gr
from datetime import datetime
import json

# Global variables for interface
chat_history = []
current_patient_data = {}

def update_patient_profile(age, weight, conditions, allergies, current_meds):
    """Update patient profile"""
    global current_patient_data

    # Parse conditions and allergies
    conditions_list = [c.strip() for c in conditions.split(',') if c.strip()] if conditions else []
    allergies_list = [a.strip() for a in allergies.split(',') if a.strip()] if allergies else []
    medications_list = [m.strip() for m in current_meds.split(',') if m.strip()] if current_meds else []

    # Update chatbot patient profile
    chatbot.set_patient_profile(
        age=int(age) if age else 25,
        weight=float(weight) if weight else None,
        conditions=conditions_list,
        allergies=allergies_list,
        medications=medications_list
    )

    current_patient_data = {
        "age": int(age) if age else 25,
        "weight": float(weight) if weight else None,
        "conditions": conditions_list,
        "allergies": allergies_list,
        "medications": medications_list
    }

    return f"✅ Patient profile updated: Age {age}, Medical conditions: {len(conditions_list)}, Allergies: {len(allergies_list)}, Current medications: {len(medications_list)}"

def analyze_prescription_text(text, use_gemini):
    """Analyze prescription text"""
    if not text.strip():
        return "Please enter prescription text to analyze."

    try:
        # Extract drugs
        extracted_drugs = nlp_processor.extract_drug_info_advanced(text)

        # Analyze text
        analysis = nlp_processor.analyze_medical_text_advanced(text)

        # Format response
        response = "📝 **Prescription Analysis Results**\n\n"

        if extracted_drugs:
            response += "**🔍 Extracted Medications:**\n\n"
            for i, drug in enumerate(extracted_drugs, 1):
                response += f"{i}. **{drug.name}**\n"
                response += f"   • Dosage: {drug.dosage}\n"
                response += f"   • Frequency: {drug.frequency}\n"
                response += f"   • Route: {drug.route}\n"
                if drug.duration:
                    response += f"   • Duration: {drug.duration}\n"
                response += "\n"

            # Check interactions if multiple drugs
            if len(extracted_drugs) > 1:
                drug_names = [drug.name for drug in extracted_drugs]
                interactions = drug_db.check_interactions(drug_names)

                if interactions:
                    response += "**⚠️ Potential Interactions:**\n\n"
                    for interaction in interactions:
                        response += f"• {interaction.description}\n"
                        response += f"  {interaction.recommendation}\n\n"
                else:
                    response += "✅ **No significant interactions detected**\n\n"
        else:
            response += "❌ No medications detected in the text.\n\n"

        # Add text analysis
        response += f"**📊 Text Analysis:**\n"
        response += f"• Sentiment: {analysis['sentiment'].title()}\n"
        response += f"• Urgency Level: {analysis['urgency_level'].title()}\n"

        if analysis['key_terms']:
            response += f"• Key Terms: {', '.join(analysis['key_terms'])}\n"

        return response

    except Exception as e:
        return f"❌ Error analyzing prescription: {str(e)}"

def check_drug_interactions(drug1, drug2, drug3, drug4):
    """Check interactions between multiple drugs"""
    drugs = [d.strip() for d in [drug1, drug2, drug3, drug4] if d and d.strip()]

    if len(drugs) < 2:
        return "Please enter at least 2 medications to check interactions."

    try:
        interactions = drug_db.check_interactions(drugs)

        response = f"🔍 **Interaction Analysis for:** {', '.join([d.title() for d in drugs])}\n\n"

        if not interactions:
            response += "✅ **No significant interactions found!**\n\n"
            response += "This combination appears to be safe based on our database, but always consult your healthcare provider."
        else:
            response += f"**⚠️ Found {len(interactions)} potential interaction(s):**\n\n"

            for i, interaction in enumerate(interactions, 1):
                severity_colors = {"major": "🚨", "moderate": "⚠️", "minor": "ℹ️"}
                response += f"{i}. {severity_colors.get(interaction.severity, '❓')} **{interaction.severity.upper()}**\n"
                response += f"   {interaction.description}\n"
                response += f"   **Recommendation:** {interaction.recommendation}\n"
                response += f"   **Confidence:** {interaction.confidence_score:.0%}\n\n"

        return response

    except Exception as e:
        return f"❌ Error checking interactions: {str(e)}"

def get_drug_information(drug_name):
    """Get comprehensive drug information"""
    if not drug_name.strip():
        return "Please enter a medication name."

    try:
        drug_info = drug_db.get_drug_info(drug_name.strip())

        if not drug_info:
            return f"❌ No information found for '{drug_name}'. Please check the spelling or try the generic name."

        response = f"💊 **{drug_name.title()}** Information\n\n"
        response += f"**Generic Name:** {drug_info.get('generic_name', 'N/A')}\n"
        response += f"**Category:** {drug_info.get('category', 'Unknown')}\n\n"

        # Dosage information
        dosage_ranges = drug_info.get('dosage_ranges', {})
        if dosage_ranges:
            response += "**📏 Dosage Ranges:**\n"
            for population, dosage in dosage_ranges.items():
                response += f"• {population.title()}: {dosage}\n"
            response += "\n"

        # Contraindications
        contraindications = drug_info.get('contraindications', [])
        if contraindications:
            response += f"**⚠️ Contraindications:** {', '.join(contraindications)}\n\n"

        # Interactions
        interactions = drug_info.get('interactions', [])
        if interactions:
            response += f"**🔄 Major Interactions:** {', '.join(interactions)}\n\n"

        # Side effects
        side_effects = drug_info.get('side_effects', [])
        if side_effects:
            response += f"**⚕️ Common Side Effects:** {', '.join(side_effects)}\n\n"

        # Alternatives
        alternatives = drug_info.get('alternatives', [])
        if alternatives:
            response += f"**🔄 Alternative Options:** {', '.join([alt.title() for alt in alternatives])}\n\n"

        response += "**⚠️ Important:** This information is for educational purposes. Always consult your healthcare provider."

        return response

    except Exception as e:
        return f"❌ Error retrieving drug information: {str(e)}"

def chat_with_bot(message, history, use_gemini):
    """Main chat function"""
    if not message.strip():
        return history, ""

    try:
        # Get response from chatbot
        response = chatbot.analyze_query_comprehensive(message, use_gemini)

        # Add to history
        history.append([message, response])

        return history, ""

    except Exception as e:
        error_response = f"❌ Sorry, I encountered an error: {str(e)}"
        history.append([message, error_response])
        return history, ""

def get_dosage_recommendation(drug_name):
    """Get dosage recommendations for a specific drug"""
    if not drug_name.strip():
        return "Please enter a medication name."

    try:
        if not chatbot.current_patient:
            return "⚠️ Please set up patient profile first for personalized dosage recommendations."

        # Get drug info
        drug_info = drug_db.get_drug_info(drug_name.strip())

        if not drug_info:
            return f"❌ No information found for '{drug_name}'."

        patient = chatbot.current_patient
        response = f"💊 **Dosage Recommendation for {drug_name.title()}**\n\n"

        # Patient-specific dosing
        dosage_ranges = drug_info.get('dosage_ranges', {})

        if patient.age < 18:
            recommended = dosage_ranges.get('pediatric', 'Consult pediatrician')
            response += f"**👶 Pediatric Dosing:** {recommended}\n\n"
        elif patient.age > 65:
            recommended = dosage_ranges.get('elderly', dosage_ranges.get('adult', 'Consult physician'))
            response += f"**👵 Elderly Dosing:** {recommended}\n\n"
        else:
            recommended = dosage_ranges.get('adult', 'Consult physician')
            response += f"**👤 Adult Dosing:** {recommended}\n\n"

        # Weight-based calculations if applicable
        if patient.weight and 'mg/kg' in str(recommended):
            try:
                mg_per_kg_match = re.search(r'(\d+(?:\.\d+)?)-?(\d+(?:\.\d+)?)?', recommended)
                if mg_per_kg_match:
                    min_dose = float(mg_per_kg_match.group(1)) * patient.weight
                    max_dose = float(mg_per_kg_match.group(2) or mg_per_kg_match.group(1)) * patient.weight
                    response += f"**⚖️ Weight-based calculation:**\n"
                    response += f"• Patient weight: {patient.weight} kg\n"
                    response += f"• Calculated dose: {min_dose:.1f}"
                    if max_dose != min_dose:
                        response += f"-{max_dose:.1f}"
                    response += " mg\n\n"
            except:
                pass

        # Contraindications check
        contraindications = drug_info.get('contraindications', [])
        patient_conditions = [c.lower().replace(' ', '_') for c in patient.medical_conditions]

        conflicting = [c for c in contraindications if c in patient_conditions]
        if conflicting:
            response += f"⚠️ **CONTRAINDICATION ALERT:** Patient has conditions that may conflict with this medication: {', '.join(conflicting)}\n\n"

        # Allergy check
        drug_name_lower = drug_name.lower()
        if any(drug_name_lower in allergy.lower() for allergy in patient.allergies):
            response += f"🚨 **ALLERGY ALERT:** Patient has reported allergy to {drug_name}!\n\n"

        response += "**⚠️ Important:** These are general guidelines. Always consult your healthcare provider for personalized medical advice."

        return response

    except Exception as e:
        return f"❌ Error getting dosage recommendation: {str(e)}"

def clear_chat():
    """Clear chat history"""
    return []

print("✅ Gradio interface functions defined!")

def create_medical_chatbot_interface():
    """Create the main Gradio interface"""

    # Custom CSS for better styling
    custom_css = """
    .gradio-container {
        font-family: 'Arial', sans-serif;
    }
    .header {
        text-align: center;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
    }
    .patient-info {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #667eea;
    }
    .warning {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    """

    with gr.Blocks(css=custom_css, title="AI Medical Prescription Verification System") as interface:

        # Header
        gr.HTML("""
        <div class="header">
            <h1>🏥 AI Medical Prescription Verification System</h1>
            <h3>Multi-Model Chatbot with IBM Granite & Google Gemini</h3>
            <p>Advanced Drug Interaction Detection • Dosage Recommendations • Alternative Medications</p>
        </div>
        """)

        # Main tabs
        with gr.Tabs():

            # Tab 1: Patient Profile Setup
            with gr.Tab("👤 Patient Profile"):
                gr.Markdown("### Set up patient information for personalized recommendations")

                with gr.Row():
                    with gr.Column():
                        age_input = gr.Number(label="Age", value=35, minimum=0, maximum=120)
                        weight_input = gr.Number(label="Weight (kg)", value=70, minimum=0)

                    with gr.Column():
                        conditions_input = gr.Textbox(
                            label="Medical Conditions (comma-separated)",
                            placeholder="e.g., diabetes, hypertension, heart disease",
                            lines=2
                        )
                        allergies_input = gr.Textbox(
                            label="Known Allergies (comma-separated)",
                            placeholder="e.g., penicillin, aspirin, sulfa",
                            lines=2
                        )

                current_meds_input = gr.Textbox(
                    label="Current Medications (comma-separated)",
                    placeholder="e.g., metformin 500mg, lisinopril 10mg",
                    lines=3
                )

                update_profile_btn = gr.Button("Update Patient Profile", variant="primary")
                profile_status = gr.Textbox(label="Profile Status", interactive=False)

                update_profile_btn.click(
                    update_patient_profile,
                    inputs=[age_input, weight_input, conditions_input, allergies_input, current_meds_input],
                    outputs=profile_status
                )

            # Tab 2: AI Chat Assistant
            with gr.Tab("💬 AI Chat Assistant"):
                gr.Markdown("### Chat with AI about medications, interactions, and dosages")

                use_gemini_chat = gr.Checkbox(
                    label="Use Google Gemini AI (Advanced Analysis)",
                    value=True if gemini_processor else False,
                    interactive=bool(gemini_processor)
                )

                if not gemini_processor:
                    gr.Markdown("⚠️ **Note:** Gemini AI not available. Please set up API key for advanced features.")

                chatbot_interface = gr.Chatbot(
                    label="Medical AI Assistant",
                    height=400,
                    avatar_images=("👤", "🤖")
                )

                with gr.Row():
                    msg_input = gr.Textbox(
                        label="Your Question",
                        placeholder="Ask about drug interactions, dosages, side effects, alternatives...",
                        scale=4
                    )
                    send_btn = gr.Button("Send", variant="primary", scale=1)
                    clear_btn = gr.Button("Clear Chat", scale=1)

                # Example questions
                gr.Markdown("### 💡 Example Questions:")
                example_questions = [
                    "Can I take aspirin with warfarin?",
                    "What's the correct dosage of metformin for a 65-year-old?",
                    "Are there alternatives to ibuprofen for someone with kidney disease?",
                    "Analyze this prescription: Take lisinopril 10mg daily and metformin 500mg twice daily"
                ]

                for question in example_questions:
                    example_btn = gr.Button(f"📝 {question}", size="sm")
                    example_btn.click(
                        lambda x=question: x,
                        outputs=msg_input
                    )

                # Chat functionality
                send_btn.click(
                    chat_with_bot,
                    inputs=[msg_input, chatbot_interface, use_gemini_chat],
                    outputs=[chatbot_interface, msg_input]
                )

                msg_input.submit(
                    chat_with_bot,
                    inputs=[msg_input, chatbot_interface, use_gemini_chat],
                    outputs=[chatbot_interface, msg_input]
                )

                clear_btn.click(clear_chat, outputs=chatbot_interface)

            # Tab 3: Drug Interaction Checker
            with gr.Tab("🔍 Interaction Checker"):
                gr.Markdown("### Check for interactions between multiple medications")

                with gr.Row():
                    drug1 = gr.Textbox(label="Medication 1", placeholder="e.g., aspirin")
                    drug2 = gr.Textbox(label="Medication 2", placeholder="e.g., warfarin")

                with gr.Row():
                    drug3 = gr.Textbox(label="Medication 3 (optional)", placeholder="e.g., metformin")
                    drug4 = gr.Textbox(label="Medication 4 (optional)", placeholder="e.g., lisinopril")

                check_interactions_btn = gr.Button("Check Interactions", variant="primary")
                interaction_results = gr.Markdown(label="Interaction Results")

                check_interactions_btn.click(
                    check_drug_interactions,
                    inputs=[drug1, drug2, drug3, drug4],
                    outputs=interaction_results
                )

            # Tab 4: Prescription Text Analyzer
            with gr.Tab("📝 Prescription Analyzer"):
                gr.Markdown("### Extract and analyze medication information from prescription text")

                prescription_text = gr.Textbox(
                    label="Prescription Text",
                    placeholder="Enter prescription text here...\n\nExample: 'Take aspirin 325mg twice daily with meals and metformin 500mg once daily for diabetes management. Continue for 30 days.'",
                    lines=6
                )

                use_gemini_analysis = gr.Checkbox(
                    label="Use Advanced AI Analysis (Gemini)",
                    value=True if gemini_processor else False,
                    interactive=bool(gemini_processor)
                )

                analyze_btn = gr.Button("Analyze Prescription", variant="primary")
                analysis_results = gr.Markdown(label="Analysis Results")

                analyze_btn.click(
                    analyze_prescription_text,
                    inputs=[prescription_text, use_gemini_analysis],
                    outputs=analysis_results
                )

            # Tab 5: Drug Information Database
            with gr.Tab("💊 Drug Information"):
                gr.Markdown("### Look up detailed information about specific medications")

                with gr.Row():
                    with gr.Column(scale=1):
                        drug_lookup = gr.Textbox(
                            label="Medication Name",
                            placeholder="Enter drug name (e.g., aspirin, metformin, lisinopril)"
                        )
                        lookup_btn = gr.Button("Get Drug Information", variant="primary")

                    with gr.Column(scale=2):
                        drug_info_results = gr.Markdown(label="Drug Information")

                lookup_btn.click(
                    get_drug_information,
                    inputs=drug_lookup,
                    outputs=drug_info_results
                )

                # Available drugs list
                gr.Markdown("### 📚 Available Medications in Database:")
                available_drugs = list(drug_db.drugs_data.keys())
                gr.Markdown(f"**{len(available_drugs)} medications:** {', '.join([d.title() for d in available_drugs])}")

            # Tab 6: Personalized Dosage Calculator
            with gr.Tab("⚖️ Dosage Calculator"):
                gr.Markdown("### Get personalized dosage recommendations based on patient profile")

                dosage_drug_input = gr.Textbox(
                    label="Medication Name",
                    placeholder="Enter medication name for dosage calculation"
                )

                calculate_dosage_btn = gr.Button("Calculate Dosage", variant="primary")
                dosage_results = gr.Markdown(label="Dosage Recommendations")

                calculate_dosage_btn.click(
                    get_dosage_recommendation,
                    inputs=dosage_drug_input,
                    outputs=dosage_results
                )

                gr.Markdown("""
                ### ⚠️ Important Medical Disclaimer

                This AI system is designed for **educational and informational purposes only**. It is not intended to:
                - Replace professional medical advice, diagnosis, or treatment
                - Provide definitive clinical recommendations
                - Substitute for consultation with qualified healthcare providers

                **Always consult with your doctor, pharmacist, or other qualified healthcare professional before:**
                - Starting, stopping, or changing any medication
                - Making decisions about drug interactions
                - Adjusting dosages
                - Seeking treatment for medical conditions

                **In case of medical emergency, contact emergency services immediately.**
                """)

        # Footer
        gr.HTML("""
        <div style="text-align: center; padding: 20px; border-top: 1px solid #ddd; margin-top: 20px;">
            <p><strong>🏥 AI Medical Prescription Verification System</strong></p>
            <p>Powered by IBM Granite, Google Gemini, and Hugging Face Transformers</p>
            <p style="font-size: 12px; color: #666;">
                For educational purposes only • Not a substitute for professional medical advice
            </p>
        </div>
        """)

    return interface

# Create and launch the interface
print("🚀 Creating Gradio interface...")
demo = create_medical_chatbot_interface()

print("✅ Medical Chatbot Interface created successfully!")
print("\n" + "="*60)
print("🏥 AI MEDICAL PRESCRIPTION VERIFICATION SYSTEM")
print("="*60)
print("Features available:")
print("✅ Multi-model AI chat (IBM Granite + Google Gemini)")
print("✅ Drug interaction detection")
print("✅ Personalized dosage recommendations")
print("✅ Prescription text analysis")
print("✅ Alternative medication suggestions")
print("✅ Comprehensive drug database")
print("="*60)

if __name__ == "__main__":
    # Launch the Gradio interface
    demo.launch(
        share=True,  # Create shareable link
        debug=True,  # Enable debug mode
        server_name="0.0.0.0",  # Allow external access
        server_port=7860,  # Default Gradio port
        show_error=True  # Show detailed error messages
    )